// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CREATEORDER_ORDERS_H_
#define FLATBUFFERS_GENERATED_CREATEORDER_ORDERS_H_

#include "flatbuffers/flatbuffers.h"

namespace Orders {

struct CreateOrder;
struct CreateOrderBuilder;

enum Exchange : int8_t {
  Exchange_NSE = 0,
  Exchange_BSE = 1,
  Exchange_MIN = Exchange_NSE,
  Exchange_MAX = Exchange_BSE
};

inline const Exchange (&EnumValuesExchange())[2] {
  static const Exchange values[] = {
    Exchange_NSE,
    Exchange_BSE
  };
  return values;
}

inline const char * const *EnumNamesExchange() {
  static const char * const names[3] = {
    "NSE",
    "BSE",
    nullptr
  };
  return names;
}

inline const char *EnumNameExchange(Exchange e) {
  if (flatbuffers::IsOutRange(e, Exchange_NSE, Exchange_BSE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesExchange()[index];
}

enum OrderType : int8_t {
  OrderType_MIS = 0,
  OrderType_CNC = 1,
  OrderType_MIN = OrderType_MIS,
  OrderType_MAX = OrderType_CNC
};

inline const OrderType (&EnumValuesOrderType())[2] {
  static const OrderType values[] = {
    OrderType_MIS,
    OrderType_CNC
  };
  return values;
}

inline const char * const *EnumNamesOrderType() {
  static const char * const names[3] = {
    "MIS",
    "CNC",
    nullptr
  };
  return names;
}

inline const char *EnumNameOrderType(OrderType e) {
  if (flatbuffers::IsOutRange(e, OrderType_MIS, OrderType_CNC)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOrderType()[index];
}

enum Action : int8_t {
  Action_BUY = 0,
  Action_SELL = 1,
  Action_MIN = Action_BUY,
  Action_MAX = Action_SELL
};

inline const Action (&EnumValuesAction())[2] {
  static const Action values[] = {
    Action_BUY,
    Action_SELL
  };
  return values;
}

inline const char * const *EnumNamesAction() {
  static const char * const names[3] = {
    "BUY",
    "SELL",
    nullptr
  };
  return names;
}

inline const char *EnumNameAction(Action e) {
  if (flatbuffers::IsOutRange(e, Action_BUY, Action_SELL)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAction()[index];
}

struct CreateOrder FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CreateOrderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT_ID = 4,
    VT_ORDER_ID = 6,
    VT_EXCHANGE = 8,
    VT_SYMBOL = 10,
    VT_ORDER_TYPE = 12,
    VT_QUANTITY = 14,
    VT_PRICE = 16,
    VT_ACTION = 18
  };
  uint32_t account_id() const {
    return GetField<uint32_t>(VT_ACCOUNT_ID, 0);
  }
  uint32_t order_id() const {
    return GetField<uint32_t>(VT_ORDER_ID, 0);
  }
  Orders::Exchange exchange() const {
    return static_cast<Orders::Exchange>(GetField<int8_t>(VT_EXCHANGE, 0));
  }
  const flatbuffers::String *symbol() const {
    return GetPointer<const flatbuffers::String *>(VT_SYMBOL);
  }
  Orders::OrderType order_type() const {
    return static_cast<Orders::OrderType>(GetField<int8_t>(VT_ORDER_TYPE, 0));
  }
  double quantity() const {
    return GetField<double>(VT_QUANTITY, 0.0);
  }
  double price() const {
    return GetField<double>(VT_PRICE, 0.0);
  }
  Orders::Action action() const {
    return static_cast<Orders::Action>(GetField<int8_t>(VT_ACTION, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ACCOUNT_ID) &&
           VerifyField<uint32_t>(verifier, VT_ORDER_ID) &&
           VerifyField<int8_t>(verifier, VT_EXCHANGE) &&
           VerifyOffset(verifier, VT_SYMBOL) &&
           verifier.VerifyString(symbol()) &&
           VerifyField<int8_t>(verifier, VT_ORDER_TYPE) &&
           VerifyField<double>(verifier, VT_QUANTITY) &&
           VerifyField<double>(verifier, VT_PRICE) &&
           VerifyField<int8_t>(verifier, VT_ACTION) &&
           verifier.EndTable();
  }
};

struct CreateOrderBuilder {
  typedef CreateOrder Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_account_id(uint32_t account_id) {
    fbb_.AddElement<uint32_t>(CreateOrder::VT_ACCOUNT_ID, account_id, 0);
  }
  void add_order_id(uint32_t order_id) {
    fbb_.AddElement<uint32_t>(CreateOrder::VT_ORDER_ID, order_id, 0);
  }
  void add_exchange(Orders::Exchange exchange) {
    fbb_.AddElement<int8_t>(CreateOrder::VT_EXCHANGE, static_cast<int8_t>(exchange), 0);
  }
  void add_symbol(flatbuffers::Offset<flatbuffers::String> symbol) {
    fbb_.AddOffset(CreateOrder::VT_SYMBOL, symbol);
  }
  void add_order_type(Orders::OrderType order_type) {
    fbb_.AddElement<int8_t>(CreateOrder::VT_ORDER_TYPE, static_cast<int8_t>(order_type), 0);
  }
  void add_quantity(double quantity) {
    fbb_.AddElement<double>(CreateOrder::VT_QUANTITY, quantity, 0.0);
  }
  void add_price(double price) {
    fbb_.AddElement<double>(CreateOrder::VT_PRICE, price, 0.0);
  }
  void add_action(Orders::Action action) {
    fbb_.AddElement<int8_t>(CreateOrder::VT_ACTION, static_cast<int8_t>(action), 0);
  }
  explicit CreateOrderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CreateOrder> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CreateOrder>(end);
    return o;
  }
};

inline flatbuffers::Offset<CreateOrder> CreateCreateOrder(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t account_id = 0,
    uint32_t order_id = 0,
    Orders::Exchange exchange = Orders::Exchange_NSE,
    flatbuffers::Offset<flatbuffers::String> symbol = 0,
    Orders::OrderType order_type = Orders::OrderType_MIS,
    double quantity = 0.0,
    double price = 0.0,
    Orders::Action action = Orders::Action_BUY) {
  CreateOrderBuilder builder_(_fbb);
  builder_.add_price(price);
  builder_.add_quantity(quantity);
  builder_.add_symbol(symbol);
  builder_.add_order_id(order_id);
  builder_.add_account_id(account_id);
  builder_.add_action(action);
  builder_.add_order_type(order_type);
  builder_.add_exchange(exchange);
  return builder_.Finish();
}

inline flatbuffers::Offset<CreateOrder> CreateCreateOrderDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t account_id = 0,
    uint32_t order_id = 0,
    Orders::Exchange exchange = Orders::Exchange_NSE,
    const char *symbol = nullptr,
    Orders::OrderType order_type = Orders::OrderType_MIS,
    double quantity = 0.0,
    double price = 0.0,
    Orders::Action action = Orders::Action_BUY) {
  auto symbol__ = symbol ? _fbb.CreateString(symbol) : 0;
  return Orders::CreateCreateOrder(
      _fbb,
      account_id,
      order_id,
      exchange,
      symbol__,
      order_type,
      quantity,
      price,
      action);
}

inline const Orders::CreateOrder *GetCreateOrder(const void *buf) {
  return flatbuffers::GetRoot<Orders::CreateOrder>(buf);
}

inline const Orders::CreateOrder *GetSizePrefixedCreateOrder(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Orders::CreateOrder>(buf);
}

inline bool VerifyCreateOrderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Orders::CreateOrder>(nullptr);
}

inline bool VerifySizePrefixedCreateOrderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Orders::CreateOrder>(nullptr);
}

inline void FinishCreateOrderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Orders::CreateOrder> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCreateOrderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Orders::CreateOrder> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Orders

#endif  // FLATBUFFERS_GENERATED_CREATEORDER_ORDERS_H_
